	Containerization :::: Docker 

		https://hub.docker.com/

	Docker & Kubernetes **********

	Docker --> It is a Containerization Tool :::

	Used to Create Docker Images and Containers --->


	Virtual Machines ???

	What is the Need for VM ???

		To scale h/w s/w update ???


	To work on more than one OS.

		

		Hypervisor		






	Virtual Machines ::::

	- VMs are used to run multiple OS.
	- It is Hardware level Virtualization.	
	- It is used to run OS.
	- It required huge space
	- Consume time to start up.



In any cloud platform :::

Regions --> 
	Availability Zones
	  Data Centers(Servers)

ap-south1a --> Virtual Machines..


	Virtual Machines ::::

	- VMs are used to run multiple OS.
	- It is Hardware level Virtualization.	
	- It is used to run OS.
	- It required huge space
	- Consume time to start up.
	- VM will continue to run even if the application is completed.

	Containers ::::

	- Containers are not to run operating systems.
	- Containers are OS level Virtualization
	- Containers are used to run Application, and NOT Operating System
	- It doesn't require much space, as it is jus used to run applications.
	- It is faster to start up.
	- Containers will exit as soon the application is completed



##############
26th May 2023
##############	

	Virtual Machine 	(vs)		Containers.

	Container ::::

	1. Infra-Structure Perspective :::

		Creating VMs ::

		Jenkins_Master	(VM)
			Slave1	(VM)	--> Is used to build your appln. Java
			Slave2	(VM)	--> Is used to build your appln. Python
			Slave3	(VM)	--> Is used to build your appln. .Net
			Slave4	(VM)	--> Is used to build your appln. NodeJS
			Slave5 	(VM)	--> Is used to build your appln. Angular
			Slave1000

		Jenkins_Master	(VM)
			Slave1 	(VM) --> Install Container Engine - Container1,2,3,4,5,6,.....,1000
				


	2. Development & Deployment Perspective :::

		Java_Application :: 1000 Microservices

		src_code --> built and artifacts(testapp.war) will be created. jdk11 & maven -->	
		Tomcat server --> jdk11 & tomcat8.5
		
		Package the artifacts along with its dependencies(testapp.war,jdk11 & tomcat8.5) ==> AppImage1

		Package are now refered as Images:

		Images are the static component or file that define the application & its' dependencies.

		Containers are the executable units of Images.			
	
		Container Images :::: 

		promote the appln. (testapp.war)

		QA (VM)	(testapp.war) --> These tools shd be installed : jdk8 & tomcat10	AppImage1 - executed as containers

		UAT	(testapp.war) --> These tools shd be installed : jdk11 & tomcat8.5	AppImage1

		PROD	(testapp.war) --> These tools shd be installed : jdk11 & tomcat8.5	AppImage1


			testapp.war_v1.0 AppImage1 --> testapp.war_v1.1 AppImage2

	DevOps Perpective :::


		Jenkins Pipeline :::
			SCM_Checkout
			Build
			Build docker Image
			Publish the Image to Container Registry
			Deploy Application Container in Target Server


	Terminologies ::::

		1. Docker Daemon/Engine/Host	
			=> Used to Create Docker Images & Containers
		2. Docker Image			
			=> Are Static file that contain the definition of Application and dependencies. It composed of various layers.	
		3. Docker Container
			=> It is an instance of Image/Excutable unit of Images. Composed of Application and it's Dependencies.
		4. Docker Registry 
			=> Is consists of Docker Repositories used to store and Manage the docker Images.
		5. Docker CLI 
			=> Is a command line utility used to interact with Docker Daemon.
			Docker Misc. Commands.


	Installation of Docker !!!!

		Linux/Window/Mac

		https://docs.docker.com/engine/install/

		IN RHEL/CENTOS/Amazon Linux 2 AMI(previous version)
		
			yum install docker -y

		Lets Install Docker in AWS Instance - Ubuntu!!!

			curl -fsSL https://get.docker.com -o get-docker.sh
			sudo sh get-docker.sh

		docker --version
		systemctl status docker
		systemctl start docker
		systemctl enable docker

   47  curl -fsSL https://get.docker.com -o get-docker.sh
   48  sudo sh get-docker.sh
   49  docker --version
   50  docker version
   51  service docker status
   52  systemctl status docker
   53  systemctl enable docker
   54  history


		Working with docker cli commands:::

		docker run --> used to run the container.

			--> Interactive Mode
				docker run -it centos
			--> Background/Detached Mode
				docker run -d centos
			--> Foreground/Attached Mode
				docker run centos
		


   55  docker images
   56  docker ps
   57  docker ps -a
   58  clear
   59  docker pull centos
   60  docker images
   61  docker ps
   62  docker ps -a
   63  docker run centos
   64  docker ps
   65  docker ps -a
   66  docker images
   67  docker run debian
   68  docker ps -a
   69  docker run -it centos
   70  docker ps -a
   71  docker run -it centos
   72  docker run centos
   73  docker run centos sleep 20
   74  docker run -d centos sleep 20
   75  history
   44  docker ps
   45  docker ps -a
   46  docker images
   47  docker rmi 1ac99357ef21
   48  docker rm 4dc1b9062403
   49  docker rmi 1ac99357ef21
   50  docker images
   51  docker ps -a
   52  docker rm 99ec7f b330ad2
   53  docker ps -a
   54  docker inspect dfcdcc467ec2
   55  docker ps -a
   56  docker images
   57  docker inspect 5d0da3dc9764
   58  docker images
   59  docker history 5d0da3dc9764
